#!/bin/sh

origin_dir=`pwd`
mkdir -p ~/.zkm-toolchain
cd ~/.zkm-toolchain

list_available() {
	rel=`curl -s https://api.github.com/repos/zkMIPS/toolchain/releases | grep '"tag_name":' | sed 's/[^0-9]*//g' | sort -r`
	if [ -z "$rel" ];then
		echo "No avaible toolchain to download"
		echo "Please check you network"
		exit 1
	fi
	echo $rel
}

get_last_version() {
	rel=`curl -s https://api.github.com/repos/zkMIPS/toolchain/releases | grep '"tag_name":' | sed 's/[^0-9]*//g' | sort -r | head -1`
	if [ -z "$rel" ];then
		echo "No avaible toolchain to download"
		echo "Please check you network"
		exit 1
	fi
	echo $rel
}

get_pkg() {
	os=`uname`
	cpu=`uname -m`
	pkg="rust-toolchain"
	version=$1
	if [ "${os}-${cpu}" = "Linux-aarch64" ];then
		pkg="${pkg}-aarch64-unknown-linux-gnu-VERSION.tar.xz"
	elif [ "${os}-${cpu}" = "Linux-x86_64" ];then
		pkg="${pkg}-x86-64-unknown-linux-gnu-VERSION.tar.xz"
	elif [ "${os}-${cpu}" = "Darwin-arm64" ];then
		pkg="${pkg}-aarch64-apple-darwin-VERSION.tar.bz2"
	elif [ "${os}-${cpu}" = "Darwin-x86_64" ];then
		pkg="${pkg}-x86-64-apple-darwin-VERSION.tar.bz2"
	else
		echo -n "Unsupported Platform: "
		uname -a
		exit 1
	fi
	if [ -z "$version" ];then
		xxx=`echo $pkg | sed 's/-VERSION.*//'`
		version=`ls -d ${xxx}-* | sort -r | head -1 | sed 's/.*-//' | sed 's/.tar.*//'`
	fi
	echo $pkg | sed "s/VERSION/$version/"
}

do_install() {
	reinstall=0
	version=
	while getopts ":v:r" opt;do
		case $opt in
			v)
				version=$OPTARG
				;;
			r)
				reinstall=1
				;;
			?)
				echo "$cmd Usage:"
				echo "      -v VERSION  install this version"
				echo "      -r          reinstall even installed"
				exit 1
				;;
		esac
	done
	if [ -z "$version" ];then
		version=`get_last_version`
	fi

	pkg=`get_pkg $version`
	dir=`echo $pkg | sed 's/.tar.*//'`
	if [ -d "$dir" ] && [ "$reinstall" = "0" ];then
		echo "$pkg is installed already."
		exit 0
	fi
	if [ ! -d "$dir" ] || [ "$reinstall" = "1" ];then
		echo "Downloading... $pkg ..."
		wget --show-progress -q -c https://github.com/zkMIPS/toolchain/releases/download/$version/$pkg -O ~/.zkm-toolchain/$pkg
		if [ $? -ne "0" ];then
			echo "Bad Version? $version"
			rm -f ~/.zkm-toolchain/$pkg
			exit 1
		fi
		set -e
		tar xf $pkg
		set +e
		echo "Install successful"
		exit 0
	fi

}

setpath() {
	local newpath=`readlink -f ~/.zkm-toolchain/$1/bin`
	echo "export PATH=$newpath:\$PATH" > ~/.zkm-toolchain/env
	local q=`readlink -f ~/.zkm-toolchain/`
	split_path=`echo $PATH | sed 's/:/ /g'`
	for e in ${split_path};do
		xxx=`echo $e | grep "^$q"`
		if [ -n "$xxx" ];then
			continue
		fi
		newpath="$newpath:$e"
	done
	export PATH=$newpath
}

do_setup() {
	version=
	while getopts ":v:r" opt;do
		case $opt in
			v)
				version=$OPTARG
				;;
			?)
				echo "$cmd Usage:"
				echo "      -v VERSION  Use version"
				exit 1
				;;
		esac
	done

	pkg=`get_pkg $version`
	dir=`echo $pkg | sed 's/.tar.*//'`
	if [ ! -d "$dir" ];then
		echo "Cannot find directory `pwd`/$dir"
		echo "Bad version? $version"
		exit 1
	fi
	setpath $dir
	echo ${echo_e_opt} "'\033[0;31m~/.zkm-toolcain/env\033[0m' created. Now you can add"
	echo ${echo_e_opt} "\033[0;32m     . ~/.zkm-toolchain/env\033[0m"
	echo ${echo_e_opt} "to your .bashrc/.zshrc/.profile to use zkMIPS toolchain"
	echo ${echo_e_opt} "Starting a new shell session..."
	cd ${origin_dir}
	$SHELL
}

cmd=$0
subcom=$1
if [ -n "$subcom" ];then
	shift
fi

if [ "$subcom" = "list-available" ];then
	list_available
	exit 0
fi

if [ "$subcom" = "install" ];then
	do_install $*
	exit 0
fi

if [ "$subcom" = "setup" ];then
	do_setup $*
	exit 0
fi

echo "$cmd Usage"
echo "     $cmd sumcommand options"
echo "  Supported subcommands"
echo "     list-available : List all avaiable toolchain versions on Github"
echo "     install : Download and Install toolchain"
echo "             -v VERSION : Use VERSION instead of the latest one"
echo "             -r         : Force redownload and reinstall"
echo "     setup : regenerate ~/.zkm-toolchain/env"
echo "             -v VERSION : Use VERSION instead of the latest installed one"
echo "   Note: subcommand 'install' won't setup env"
